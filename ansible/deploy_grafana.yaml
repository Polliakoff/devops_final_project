- hosts: worker-node-db
  become: yes
  tasks:
    - name: alter target node filesystem
      shell: |
        mkdir -p /mnt/grafana
        touch dir_created.txt
      args:
        chdir: $HOME
        creates: dir_created.txt

- hosts: master-node
  tasks:
    - name: create grafana persistent volume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            namespace: default
            name: grafana-pv
          spec:
            capacity:
              storage: 1Gi
            volumeMode: Filesystem
            accessModes:
              - ReadWriteOnce
            persistentVolumeReclaimPolicy: Delete
            storageClassName: local-storage
            local:
              path: /mnt/grafana
            nodeAffinity:
              required:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: workload
                    operator: In
                    values:
                    - db

    - name: create grafana persistent volume claim
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            namespace: default
            name: grafana-pvc
          spec:
            accessModes:
              - ReadWriteOnce
            volumeMode: Filesystem
            resources:
              requests:
                storage: 1Gi
            storageClassName: local-storage

    - name: create grafana deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: grafana
            name: grafana
            namespace: default
          spec:
            selector:
              matchLabels:
                app: grafana
            template:
              metadata:
                labels:
                  app: grafana
              spec:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: workload
                          operator: In
                          values:
                          - db
                securityContext:
                  fsGroup: 472
                  supplementalGroups:
                    - 0
                containers:
                  - name: grafana
                    image: grafana/grafana:9.1.0
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: 3000
                        name: http-grafana
                        protocol: TCP
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /robots.txt
                        port: 3000
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 30
                      successThreshold: 1
                      timeoutSeconds: 2
                    livenessProbe:
                      failureThreshold: 3
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      successThreshold: 1
                      tcpSocket:
                        port: 3000
                      timeoutSeconds: 1
                    resources:
                      requests:
                        cpu: 250m
                        memory: 750Mi
                    volumeMounts:
                      - mountPath: /var/lib/grafana
                        name: grafana-v
                volumes:
                  - name: grafana-v
                    persistentVolumeClaim:
                      claimName: grafana-pvc

    - name: create grafana service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana
            namespace: default
          spec:
            ports:
              - port: 3000
                protocol: TCP
                targetPort: http-grafana
            selector:
              app: grafana
            sessionAffinity: None
            type: LoadBalancer
